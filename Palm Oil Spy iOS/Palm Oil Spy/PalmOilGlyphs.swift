//
//  PalmOilGlyphs.swift
//  Palm Oil App
//
//  Created by Vladimír Bělohradský on 18/06/2017.
//  Copyright © 2017 GDGSCL. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

import UIKit


public class PalmOilGlyphs : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawBarcodeBar(frame: CGRect = CGRect(x: 11, y: 7, width: 172, height: 71), borderColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: frame.minX, y: frame.minY + 30))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 2, y: frame.minY + 30))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 2, y: frame.minY))
        bezierPath.addLine(to: CGPoint(x: frame.minX, y: frame.minY))
        bezierPath.addLine(to: CGPoint(x: frame.minX, y: frame.minY + 30))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: frame.minX + 2, y: frame.minY + 2))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 32, y: frame.minY + 2))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 32, y: frame.minY))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 2, y: frame.minY))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 2, y: frame.minY + 2))
        bezierPath.close()
        borderColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: frame.maxX, y: frame.minY + 30))
        bezier2Path.addLine(to: CGPoint(x: frame.maxX - 2, y: frame.minY + 30))
        bezier2Path.addLine(to: CGPoint(x: frame.maxX - 2, y: frame.minY))
        bezier2Path.addLine(to: CGPoint(x: frame.maxX, y: frame.minY))
        bezier2Path.addLine(to: CGPoint(x: frame.maxX, y: frame.minY + 30))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: frame.maxX - 2, y: frame.minY + 2))
        bezier2Path.addLine(to: CGPoint(x: frame.maxX - 32, y: frame.minY + 2))
        bezier2Path.addLine(to: CGPoint(x: frame.maxX - 32, y: frame.minY))
        bezier2Path.addLine(to: CGPoint(x: frame.maxX - 2, y: frame.minY))
        bezier2Path.addLine(to: CGPoint(x: frame.maxX - 2, y: frame.minY + 2))
        bezier2Path.close()
        borderColor.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: frame.maxX, y: frame.maxY - 30))
        bezier3Path.addLine(to: CGPoint(x: frame.maxX - 2, y: frame.maxY - 30))
        bezier3Path.addLine(to: CGPoint(x: frame.maxX - 2, y: frame.maxY))
        bezier3Path.addLine(to: CGPoint(x: frame.maxX, y: frame.maxY))
        bezier3Path.addLine(to: CGPoint(x: frame.maxX, y: frame.maxY - 30))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: frame.maxX - 2, y: frame.maxY - 2))
        bezier3Path.addLine(to: CGPoint(x: frame.maxX - 32, y: frame.maxY - 2))
        bezier3Path.addLine(to: CGPoint(x: frame.maxX - 32, y: frame.maxY))
        bezier3Path.addLine(to: CGPoint(x: frame.maxX - 2, y: frame.maxY))
        bezier3Path.addLine(to: CGPoint(x: frame.maxX - 2, y: frame.maxY - 2))
        bezier3Path.close()
        borderColor.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: frame.minX, y: frame.maxY - 30))
        bezier4Path.addLine(to: CGPoint(x: frame.minX + 2, y: frame.maxY - 30))
        bezier4Path.addLine(to: CGPoint(x: frame.minX + 2, y: frame.maxY))
        bezier4Path.addLine(to: CGPoint(x: frame.minX, y: frame.maxY))
        bezier4Path.addLine(to: CGPoint(x: frame.minX, y: frame.maxY - 30))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: frame.minX + 2, y: frame.maxY - 2))
        bezier4Path.addLine(to: CGPoint(x: frame.minX + 32, y: frame.maxY - 2))
        bezier4Path.addLine(to: CGPoint(x: frame.minX + 32, y: frame.maxY))
        bezier4Path.addLine(to: CGPoint(x: frame.minX + 2, y: frame.maxY))
        bezier4Path.addLine(to: CGPoint(x: frame.minX + 2, y: frame.maxY - 2))
        bezier4Path.close()
        borderColor.setFill()
        bezier4Path.fill()
    }

    @objc dynamic public class func drawThumbOK(frame: CGRect = CGRect(x: 32, y: 39, width: 158, height: 159), thumbColor: UIColor = UIColor(red: 0.652, green: 0.800, blue: 0.320, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: frame.minX + 0.84810 * frame.width, y: frame.minY + 0.49088 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.78752 * frame.width, y: frame.minY + 0.43331 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.84810 * frame.width, y: frame.minY + 0.45836 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.82207 * frame.width, y: frame.minY + 0.43331 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.56965 * frame.width, y: frame.minY + 0.43331 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.60855 * frame.width, y: frame.minY + 0.26529 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.58357 * frame.width, y: frame.minY + 0.40140 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.60855 * frame.width, y: frame.minY + 0.33443 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.53489 * frame.width, y: frame.minY + 0.16981 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.60855 * frame.width, y: frame.minY + 0.18637 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.56850 * frame.width, y: frame.minY + 0.16981 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.48395 * frame.width, y: frame.minY + 0.21362 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.51409 * frame.width, y: frame.minY + 0.16981 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.48395 * frame.width, y: frame.minY + 0.18541 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.41659 * frame.width, y: frame.minY + 0.38574 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.48395 * frame.width, y: frame.minY + 0.22554 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.48206 * frame.width, y: frame.minY + 0.33148 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.28882 * frame.width, y: frame.minY + 0.45869 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.34685 * frame.width, y: frame.minY + 0.44357 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.32704 * frame.width, y: frame.minY + 0.45869 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.16511 * frame.width, y: frame.minY + 0.45965 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.24430 * frame.width, y: frame.minY + 0.45869 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.16511 * frame.width, y: frame.minY + 0.45965 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.15190 * frame.width, y: frame.minY + 0.45982 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.15190 * frame.width, y: frame.minY + 0.76781 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.29769 * frame.width, y: frame.minY + 0.76781 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.36062 * frame.width, y: frame.minY + 0.79132 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.30715 * frame.width, y: frame.minY + 0.76781 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.33558 * frame.width, y: frame.minY + 0.78031 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.48048 * frame.width, y: frame.minY + 0.83019 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.40200 * frame.width, y: frame.minY + 0.80955 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.44892 * frame.width, y: frame.minY + 0.83019 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.69106 * frame.width, y: frame.minY + 0.83011 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.75325 * frame.width, y: frame.minY + 0.77070 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.72536 * frame.width, y: frame.minY + 0.83011 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.75325 * frame.width, y: frame.minY + 0.80347 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.74066 * frame.width, y: frame.minY + 0.73524 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.75325 * frame.width, y: frame.minY + 0.75737 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.74843 * frame.width, y: frame.minY + 0.74517 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.78433 * frame.width, y: frame.minY + 0.67838 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.76577 * frame.width, y: frame.minY + 0.72813 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.78433 * frame.width, y: frame.minY + 0.70547 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.77169 * frame.width, y: frame.minY + 0.64231 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.78433 * frame.width, y: frame.minY + 0.66477 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.77949 * frame.width, y: frame.minY + 0.65237 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.81450 * frame.width, y: frame.minY + 0.58484 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.79642 * frame.width, y: frame.minY + 0.63450 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.81450 * frame.width, y: frame.minY + 0.61184 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.80213 * frame.width, y: frame.minY + 0.54872 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.81450 * frame.width, y: frame.minY + 0.57128 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.80978 * frame.width, y: frame.minY + 0.55883 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.84810 * frame.width, y: frame.minY + 0.49083 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.82847 * frame.width, y: frame.minY + 0.54222 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.84810 * frame.width, y: frame.minY + 0.51883 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.84810 * frame.width, y: frame.minY + 0.49088 * frame.height))
        bezierPath.close()
        thumbColor.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawThumbKO(frame: CGRect = CGRect(x: 32, y: 15, width: 158, height: 159), thumbColor: UIColor = UIColor(red: 0.652, green: 0.800, blue: 0.320, alpha: 1.000)) {

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: frame.minX + 0.15190 * frame.width, y: frame.minY + 0.50912 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.21248 * frame.width, y: frame.minY + 0.56669 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.15190 * frame.width, y: frame.minY + 0.54164 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.17793 * frame.width, y: frame.minY + 0.56669 * frame.height))
        bezier2Path.addLine(to: CGPoint(x: frame.minX + 0.43035 * frame.width, y: frame.minY + 0.56669 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.39145 * frame.width, y: frame.minY + 0.73471 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.41643 * frame.width, y: frame.minY + 0.59860 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.39145 * frame.width, y: frame.minY + 0.66557 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.46511 * frame.width, y: frame.minY + 0.83019 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.39145 * frame.width, y: frame.minY + 0.81363 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.43150 * frame.width, y: frame.minY + 0.83019 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.51605 * frame.width, y: frame.minY + 0.78638 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.48591 * frame.width, y: frame.minY + 0.83019 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.51605 * frame.width, y: frame.minY + 0.81459 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.58341 * frame.width, y: frame.minY + 0.61426 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.51605 * frame.width, y: frame.minY + 0.77446 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.51794 * frame.width, y: frame.minY + 0.66852 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.71118 * frame.width, y: frame.minY + 0.54131 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.65315 * frame.width, y: frame.minY + 0.55643 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.67296 * frame.width, y: frame.minY + 0.54131 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.83489 * frame.width, y: frame.minY + 0.54035 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.75570 * frame.width, y: frame.minY + 0.54131 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.83489 * frame.width, y: frame.minY + 0.54035 * frame.height))
        bezier2Path.addLine(to: CGPoint(x: frame.minX + 0.84810 * frame.width, y: frame.minY + 0.54018 * frame.height))
        bezier2Path.addLine(to: CGPoint(x: frame.minX + 0.84810 * frame.width, y: frame.minY + 0.23219 * frame.height))
        bezier2Path.addLine(to: CGPoint(x: frame.minX + 0.70231 * frame.width, y: frame.minY + 0.23219 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.63938 * frame.width, y: frame.minY + 0.20868 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.69285 * frame.width, y: frame.minY + 0.23219 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.66442 * frame.width, y: frame.minY + 0.21969 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.51952 * frame.width, y: frame.minY + 0.16981 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.59800 * frame.width, y: frame.minY + 0.19045 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.55108 * frame.width, y: frame.minY + 0.16981 * frame.height))
        bezier2Path.addLine(to: CGPoint(x: frame.minX + 0.30894 * frame.width, y: frame.minY + 0.16989 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.24675 * frame.width, y: frame.minY + 0.22930 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.27464 * frame.width, y: frame.minY + 0.16989 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.24675 * frame.width, y: frame.minY + 0.19653 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.25934 * frame.width, y: frame.minY + 0.26476 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.24675 * frame.width, y: frame.minY + 0.24263 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.25157 * frame.width, y: frame.minY + 0.25483 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.21567 * frame.width, y: frame.minY + 0.32162 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.23423 * frame.width, y: frame.minY + 0.27187 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.21567 * frame.width, y: frame.minY + 0.29453 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.22831 * frame.width, y: frame.minY + 0.35769 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.21567 * frame.width, y: frame.minY + 0.33523 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.22051 * frame.width, y: frame.minY + 0.34763 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.18550 * frame.width, y: frame.minY + 0.41516 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.20358 * frame.width, y: frame.minY + 0.36550 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.18550 * frame.width, y: frame.minY + 0.38816 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.19787 * frame.width, y: frame.minY + 0.45128 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.18550 * frame.width, y: frame.minY + 0.42872 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.19022 * frame.width, y: frame.minY + 0.44117 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.15190 * frame.width, y: frame.minY + 0.50917 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.17153 * frame.width, y: frame.minY + 0.45778 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.15190 * frame.width, y: frame.minY + 0.48117 * frame.height))
        bezier2Path.addLine(to: CGPoint(x: frame.minX + 0.15190 * frame.width, y: frame.minY + 0.50912 * frame.height))
        bezier2Path.close()
        thumbColor.setFill()
        bezier2Path.fill()
    }

    @objc dynamic public class func drawUnknown(frame: CGRect = CGRect(x: 22, y: 20, width: 158, height: 159), thumbColor: UIColor = UIColor(red: 0.652, green: 0.800, blue: 0.320, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: frame.minX + 79.5, y: frame.minY + 36))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 36, y: frame.minY + 79.5), controlPoint1: CGPoint(x: frame.minX + 55.48, y: frame.minY + 36), controlPoint2: CGPoint(x: frame.minX + 36, y: frame.minY + 55.48))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 79.5, y: frame.minY + 123), controlPoint1: CGPoint(x: frame.minX + 36, y: frame.minY + 103.52), controlPoint2: CGPoint(x: frame.minX + 55.48, y: frame.minY + 123))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 123, y: frame.minY + 79.5), controlPoint1: CGPoint(x: frame.minX + 103.52, y: frame.minY + 123), controlPoint2: CGPoint(x: frame.minX + 123, y: frame.minY + 103.52))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 79.5, y: frame.minY + 36), controlPoint1: CGPoint(x: frame.minX + 123, y: frame.minY + 55.48), controlPoint2: CGPoint(x: frame.minX + 103.52, y: frame.minY + 36))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: frame.minX + 79.5, y: frame.minY + 102.12))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 76.02, y: frame.minY + 98.64), controlPoint1: CGPoint(x: frame.minX + 77.58, y: frame.minY + 102.12), controlPoint2: CGPoint(x: frame.minX + 76.02, y: frame.minY + 100.56))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 79.5, y: frame.minY + 95.16), controlPoint1: CGPoint(x: frame.minX + 76.02, y: frame.minY + 96.72), controlPoint2: CGPoint(x: frame.minX + 77.58, y: frame.minY + 95.16))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 82.98, y: frame.minY + 98.64), controlPoint1: CGPoint(x: frame.minX + 81.42, y: frame.minY + 95.16), controlPoint2: CGPoint(x: frame.minX + 82.98, y: frame.minY + 96.72))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 79.5, y: frame.minY + 102.12), controlPoint1: CGPoint(x: frame.minX + 82.98, y: frame.minY + 100.56), controlPoint2: CGPoint(x: frame.minX + 81.42, y: frame.minY + 102.12))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: frame.minX + 86.42, y: frame.minY + 78.32))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 81.65, y: frame.minY + 88.2), controlPoint1: CGPoint(x: frame.minX + 81.76, y: frame.minY + 82.97), controlPoint2: CGPoint(x: frame.minX + 81.88, y: frame.minY + 82.86))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 77.76, y: frame.minY + 88.2))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 83.92, y: frame.minY + 76), controlPoint1: CGPoint(x: frame.minX + 77.99, y: frame.minY + 82.31), controlPoint2: CGPoint(x: frame.minX + 79.29, y: frame.minY + 80.3))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 87.88, y: frame.minY + 68.14), controlPoint1: CGPoint(x: frame.minX + 86.17, y: frame.minY + 73.87), controlPoint2: CGPoint(x: frame.minX + 87.88, y: frame.minY + 71.31))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 79.17, y: frame.minY + 59.92), controlPoint1: CGPoint(x: frame.minX + 87.88, y: frame.minY + 63.27), controlPoint2: CGPoint(x: frame.minX + 83.92, y: frame.minY + 59.92))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 69.36, y: frame.minY + 70.8), controlPoint1: CGPoint(x: frame.minX + 72.53, y: frame.minY + 59.92), controlPoint2: CGPoint(x: frame.minX + 69.24, y: frame.minY + 64.52))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 65.52, y: frame.minY + 70.8))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 79.35, y: frame.minY + 56.69), controlPoint1: CGPoint(x: frame.minX + 65.59, y: frame.minY + 62.15), controlPoint2: CGPoint(x: frame.minX + 70.52, y: frame.minY + 56.69))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 91.71, y: frame.minY + 67.96), controlPoint1: CGPoint(x: frame.minX + 86.11, y: frame.minY + 56.69), controlPoint2: CGPoint(x: frame.minX + 91.71, y: frame.minY + 60.9))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 86.41, y: frame.minY + 78.32), controlPoint1: CGPoint(x: frame.minX + 91.71, y: frame.minY + 72.47), controlPoint2: CGPoint(x: frame.minX + 89.52, y: frame.minY + 75.39))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 86.42, y: frame.minY + 78.32))
        bezierPath.close()
        thumbColor.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawButtonFlash(frame: CGRect = CGRect(x: 53, y: 39, width: 60, height: 60), buttonColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: frame.minX + 0.66987 * frame.width, y: frame.minY + 0.48102 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.55253 * frame.width, y: frame.minY + 0.48102 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.58102 * frame.width, y: frame.minY + 0.25000 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.35000 * frame.width, y: frame.minY + 0.55210 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.46733 * frame.width, y: frame.minY + 0.55210 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.43885 * frame.width, y: frame.minY + 0.78312 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.66987 * frame.width, y: frame.minY + 0.48102 * frame.height))
        bezierPath.close()
        buttonColor.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawButtonHistory(frame: CGRect = CGRect(x: 19, y: 22, width: 60, height: 60), buttonColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Page-1
        context.saveGState()
        context.translateBy(x: frame.minX + 0.49559 * frame.width, y: frame.minY + 0.50833 * frame.height)



        //// icon-history
        context.saveGState()
        context.setAlpha(0.9)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Shape-Copy Drawing
        let shapeCopyPath = UIBezierPath()
        shapeCopyPath.move(to: CGPoint(x: 0.84, y: -15.5))
        shapeCopyPath.addCurve(to: CGPoint(x: -12.89, y: -7.67), controlPoint1: CGPoint(x: -5.02, y: -15.5), controlPoint2: CGPoint(x: -10.21, y: -12.4))
        shapeCopyPath.addLine(to: CGPoint(x: -16.74, y: -11.42))
        shapeCopyPath.addLine(to: CGPoint(x: -16.74, y: -0.82))
        shapeCopyPath.addLine(to: CGPoint(x: -5.86, y: -0.82))
        shapeCopyPath.addLine(to: CGPoint(x: -10.54, y: -5.38))
        shapeCopyPath.addCurve(to: CGPoint(x: 0.84, y: -12.24), controlPoint1: CGPoint(x: -8.37, y: -9.46), controlPoint2: CGPoint(x: -4.18, y: -12.24))
        shapeCopyPath.addCurve(to: CGPoint(x: 13.39, y: 0), controlPoint1: CGPoint(x: 7.7, y: -12.24), controlPoint2: CGPoint(x: 13.39, y: -6.69))
        shapeCopyPath.addCurve(to: CGPoint(x: 0.84, y: 12.24), controlPoint1: CGPoint(x: 13.39, y: 6.69), controlPoint2: CGPoint(x: 7.7, y: 12.24))
        shapeCopyPath.addCurve(to: CGPoint(x: -11.05, y: 4.08), controlPoint1: CGPoint(x: -4.69, y: 12.24), controlPoint2: CGPoint(x: -9.2, y: 8.81))
        shapeCopyPath.addLine(to: CGPoint(x: -14.56, y: 4.08))
        shapeCopyPath.addCurve(to: CGPoint(x: 0.84, y: 15.5), controlPoint1: CGPoint(x: -12.72, y: 10.61), controlPoint2: CGPoint(x: -6.53, y: 15.5))
        shapeCopyPath.addCurve(to: CGPoint(x: 16.74, y: 0), controlPoint1: CGPoint(x: 9.71, y: 15.5), controlPoint2: CGPoint(x: 16.74, y: 8.48))
        shapeCopyPath.addCurve(to: CGPoint(x: 0.84, y: -15.5), controlPoint1: CGPoint(x: 16.74, y: -8.48), controlPoint2: CGPoint(x: 9.54, y: -15.5))
        shapeCopyPath.addLine(to: CGPoint(x: 0.84, y: -15.5))
        shapeCopyPath.close()
        shapeCopyPath.move(to: CGPoint(x: -1.67, y: -7.34))
        shapeCopyPath.addLine(to: CGPoint(x: -1.67, y: 0.98))
        shapeCopyPath.addLine(to: CGPoint(x: 6.19, y: 5.55))
        shapeCopyPath.addLine(to: CGPoint(x: 7.53, y: 3.43))
        shapeCopyPath.addLine(to: CGPoint(x: 0.84, y: -0.49))
        shapeCopyPath.addLine(to: CGPoint(x: 0.84, y: -7.34))
        shapeCopyPath.addLine(to: CGPoint(x: -1.67, y: -7.34))
        shapeCopyPath.addLine(to: CGPoint(x: -1.67, y: -7.34))
        shapeCopyPath.close()
        shapeCopyPath.usesEvenOddFillRule = true
        buttonColor.setFill()
        shapeCopyPath.fill()


        context.endTransparencyLayer()
        context.restoreGState()



        context.restoreGState()
    }

    @objc dynamic public class func drawButtonInfo(frame: CGRect = CGRect(x: 44, y: 46, width: 60, height: 60), buttonColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Page-1
        context.saveGState()
        context.translateBy(x: frame.minX + 0.50449 * frame.width, y: frame.minY + 0.50000 * frame.height)



        //// icon-info
        //// Shape-Copy-2 Drawing
        let shapeCopy2Path = UIBezierPath()
        shapeCopy2Path.move(to: CGPoint(x: 3.32, y: -15))
        shapeCopy2Path.addCurve(to: CGPoint(x: 6.05, y: -12.06), controlPoint1: CGPoint(x: 5.14, y: -15), controlPoint2: CGPoint(x: 6.05, y: -13.63))
        shapeCopy2Path.addCurve(to: CGPoint(x: 2.4, y: -8.3), controlPoint1: CGPoint(x: 6.05, y: -10.11), controlPoint2: CGPoint(x: 4.47, y: -8.3))
        shapeCopy2Path.addCurve(to: CGPoint(x: -0.29, y: -11.28), controlPoint1: CGPoint(x: 0.67, y: -8.3), controlPoint2: CGPoint(x: -0.34, y: -9.42))
        shapeCopy2Path.addCurve(to: CGPoint(x: 3.32, y: -15), controlPoint1: CGPoint(x: -0.29, y: -12.85), controlPoint2: CGPoint(x: 0.91, y: -15))
        shapeCopy2Path.addLine(to: CGPoint(x: 3.32, y: -15))
        shapeCopy2Path.close()
        shapeCopy2Path.move(to: CGPoint(x: -2.31, y: 15))
        shapeCopy2Path.addCurve(to: CGPoint(x: -3.79, y: 9.72), controlPoint1: CGPoint(x: -3.75, y: 15), controlPoint2: CGPoint(x: -4.8, y: 14.02))
        shapeCopy2Path.addLine(to: CGPoint(x: -2.14, y: 2.08))
        shapeCopy2Path.addCurve(to: CGPoint(x: -2.14, y: 0.37), controlPoint1: CGPoint(x: -1.85, y: 0.86), controlPoint2: CGPoint(x: -1.8, y: 0.37))
        shapeCopy2Path.addCurve(to: CGPoint(x: -5.55, y: 2.04), controlPoint1: CGPoint(x: -2.57, y: 0.37), controlPoint2: CGPoint(x: -4.44, y: 1.21))
        shapeCopy2Path.addLine(to: CGPoint(x: -6.27, y: 0.72))
        shapeCopy2Path.addCurve(to: CGPoint(x: 3, y: -4.48), controlPoint1: CGPoint(x: -2.76, y: -2.56), controlPoint2: CGPoint(x: 1.27, y: -4.48))
        shapeCopy2Path.addCurve(to: CGPoint(x: 3.96, y: 0.37), controlPoint1: CGPoint(x: 4.44, y: -4.48), controlPoint2: CGPoint(x: 4.68, y: -2.57))
        shapeCopy2Path.addLine(to: CGPoint(x: 2.07, y: 8.39))
        shapeCopy2Path.addCurve(to: CGPoint(x: 2.21, y: 10.3), controlPoint1: CGPoint(x: 1.73, y: 9.81), controlPoint2: CGPoint(x: 1.87, y: 10.3))
        shapeCopy2Path.addCurve(to: CGPoint(x: 5.45, y: 8.49), controlPoint1: CGPoint(x: 2.64, y: 10.3), controlPoint2: CGPoint(x: 4.06, y: 9.71))
        shapeCopy2Path.addLine(to: CGPoint(x: 6.27, y: 9.71))
        shapeCopy2Path.addCurve(to: CGPoint(x: -2.31, y: 15), controlPoint1: CGPoint(x: 2.86, y: 13.53), controlPoint2: CGPoint(x: -0.86, y: 15))
        shapeCopy2Path.addLine(to: CGPoint(x: -2.31, y: 15))
        shapeCopy2Path.close()
        shapeCopy2Path.usesEvenOddFillRule = true
        buttonColor.setFill()
        shapeCopy2Path.fill()





        context.restoreGState()
    }

    @objc dynamic public class func drawPalmOilLogo(frame: CGRect = CGRect(x: 0, y: 503, width: 208, height: 308), borderColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Subframes
        let layer_1: CGRect = CGRect(x: frame.minX + fastFloor(frame.width * 0.05134 - 0.18) + 0.68, y: frame.minY + 25.36, width: fastFloor(frame.width * 0.93575 - 0.14) - fastFloor(frame.width * 0.05134 - 0.18) - 0.04, height: frame.height - 44.96)


        //// Layer_1
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: layer_1.minX + 0.30319 * layer_1.width, y: layer_1.minY + 0.00000 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.44803 * layer_1.width, y: layer_1.minY + 0.01759 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.35237 * layer_1.width, y: layer_1.minY + 0.00100 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.40180 * layer_1.width, y: layer_1.minY + 0.00665 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.21702 * layer_1.width, y: layer_1.minY + 0.08841 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.34207 * layer_1.width, y: layer_1.minY + 0.01759 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.21702 * layer_1.width, y: layer_1.minY + 0.08841 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.57895 * layer_1.width, y: layer_1.minY + 0.14631 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.52618 * layer_1.width, y: layer_1.minY + 0.04977 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.57895 * layer_1.width, y: layer_1.minY + 0.14631 * layer_1.height))
        bezierPath.addLine(to: CGPoint(x: layer_1.minX + 0.44803 * layer_1.width, y: layer_1.minY + 0.12701 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.27735 * layer_1.width, y: layer_1.minY + 0.14617 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.35811 * layer_1.width, y: layer_1.minY + 0.11403 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.30588 * layer_1.width, y: layer_1.minY + 0.12428 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.55601 * layer_1.width, y: layer_1.minY + 0.39848 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.36266 * layer_1.width, y: layer_1.minY + 0.17289 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.48150 * layer_1.width, y: layer_1.minY + 0.23860 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.77066 * layer_1.width, y: layer_1.minY + 0.22062 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.61772 * layer_1.width, y: layer_1.minY + 0.28845 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.70591 * layer_1.width, y: layer_1.minY + 0.24093 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.62960 * layer_1.width, y: layer_1.minY + 0.20477 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.74704 * layer_1.width, y: layer_1.minY + 0.20248 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.70392 * layer_1.width, y: layer_1.minY + 0.19405 * layer_1.height))
        bezierPath.addLine(to: CGPoint(x: layer_1.minX + 0.52135 * layer_1.width, y: layer_1.minY + 0.22074 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.82055 * layer_1.width, y: layer_1.minY + 0.17285 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.52135 * layer_1.width, y: layer_1.minY + 0.22074 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.56496 * layer_1.width, y: layer_1.minY + 0.14092 * layer_1.height))
        bezierPath.addLine(to: CGPoint(x: layer_1.minX + 0.91403 * layer_1.width, y: layer_1.minY + 0.20477 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.91404 * layer_1.width, y: layer_1.minY + 0.39632 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.91403 * layer_1.width, y: layer_1.minY + 0.20477 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 1.10746 * layer_1.width, y: layer_1.minY + 0.34305 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.85920 * layer_1.width, y: layer_1.minY + 0.25265 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.91404 * layer_1.width, y: layer_1.minY + 0.39632 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.95592 * layer_1.width, y: layer_1.minY + 0.28260 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.74914 * layer_1.width, y: layer_1.minY + 0.39632 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.85927 * layer_1.width, y: layer_1.minY + 0.29868 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.84665 * layer_1.width, y: layer_1.minY + 0.39441 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.74914 * layer_1.width, y: layer_1.minY + 0.39632 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.74913 * layer_1.width, y: layer_1.minY + 0.39632 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.74914 * layer_1.width, y: layer_1.minY + 0.39632 * layer_1.height))
        bezierPath.addLine(to: CGPoint(x: layer_1.minX + 0.74914 * layer_1.width, y: layer_1.minY + 0.39632 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.78783 * layer_1.width, y: layer_1.minY + 0.24075 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.77872 * layer_1.width, y: layer_1.minY + 0.35170 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.80919 * layer_1.width, y: layer_1.minY + 0.28817 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.62882 * layer_1.width, y: layer_1.minY + 0.46623 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.67053 * layer_1.width, y: layer_1.minY + 0.31260 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.63533 * layer_1.width, y: layer_1.minY + 0.39911 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.60050 * layer_1.width, y: layer_1.minY + 0.53484 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.62636 * layer_1.width, y: layer_1.minY + 0.49162 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.61420 * layer_1.width, y: layer_1.minY + 0.51542 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.80738 * layer_1.width, y: layer_1.minY + 0.83729 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.67105 * layer_1.width, y: layer_1.minY + 0.66650 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.80738 * layer_1.width, y: layer_1.minY + 0.71727 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.54917 * layer_1.width, y: layer_1.minY + 1.00000 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.80738 * layer_1.width, y: layer_1.minY + 0.92714 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.68919 * layer_1.width, y: layer_1.minY + 1.00000 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.29096 * layer_1.width, y: layer_1.minY + 0.83729 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.40915 * layer_1.width, y: layer_1.minY + 1.00000 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.29096 * layer_1.width, y: layer_1.minY + 0.92714 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.48906 * layer_1.width, y: layer_1.minY + 0.55009 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.29096 * layer_1.width, y: layer_1.minY + 0.72202 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.41664 * layer_1.width, y: layer_1.minY + 0.67062 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.45022 * layer_1.width, y: layer_1.minY + 0.46065 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.47094 * layer_1.width, y: layer_1.minY + 0.52773 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.45165 * layer_1.width, y: layer_1.minY + 0.49592 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.25669 * layer_1.width, y: layer_1.minY + 0.17055 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.44684 * layer_1.width, y: layer_1.minY + 0.37747 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.53272 * layer_1.width, y: layer_1.minY + 0.33962 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.26407 * layer_1.width, y: layer_1.minY + 0.28437 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.23942 * layer_1.width, y: layer_1.minY + 0.20759 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.24957 * layer_1.width, y: layer_1.minY + 0.24765 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.30346 * layer_1.width, y: layer_1.minY + 0.35874 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.27405 * layer_1.width, y: layer_1.minY + 0.30964 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.28686 * layer_1.width, y: layer_1.minY + 0.33487 * layer_1.height))
        bezierPath.addLine(to: CGPoint(x: layer_1.minX + 0.30346 * layer_1.width, y: layer_1.minY + 0.35874 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.30346 * layer_1.width, y: layer_1.minY + 0.35874 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.30347 * layer_1.width, y: layer_1.minY + 0.35875 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.30347 * layer_1.width, y: layer_1.minY + 0.35875 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.17036 * layer_1.width, y: layer_1.minY + 0.18494 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.18677 * layer_1.width, y: layer_1.minY + 0.35667 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.16905 * layer_1.width, y: layer_1.minY + 0.24006 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.10395 * layer_1.width, y: layer_1.minY + 0.35874 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.05339 * layer_1.width, y: layer_1.minY + 0.22118 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.10395 * layer_1.width, y: layer_1.minY + 0.35874 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.10395 * layer_1.width, y: layer_1.minY + 0.12701 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + -0.12994 * layer_1.width, y: layer_1.minY + 0.29429 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.10395 * layer_1.width, y: layer_1.minY + 0.12701 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.18095 * layer_1.width, y: layer_1.minY + 0.01933 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.10552 * layer_1.width, y: layer_1.minY + 0.08632 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.12487 * layer_1.width, y: layer_1.minY + 0.04288 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.30319 * layer_1.width, y: layer_1.minY + 0.00000 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.21738 * layer_1.width, y: layer_1.minY + 0.00402 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.26052 * layer_1.width, y: layer_1.minY + 0.00028 * layer_1.height))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: layer_1.minX + 0.50298 * layer_1.width, y: layer_1.minY + 0.65886 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.49338 * layer_1.width, y: layer_1.minY + 0.66250 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.49886 * layer_1.width, y: layer_1.minY + 0.65915 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.49574 * layer_1.width, y: layer_1.minY + 0.66037 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.45665 * layer_1.width, y: layer_1.minY + 0.69635 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.48298 * layer_1.width, y: layer_1.minY + 0.67354 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.47019 * layer_1.width, y: layer_1.minY + 0.68463 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.36438 * layer_1.width, y: layer_1.minY + 0.84123 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.41340 * layer_1.width, y: layer_1.minY + 0.73380 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.36438 * layer_1.width, y: layer_1.minY + 0.77625 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.41770 * layer_1.width, y: layer_1.minY + 0.87556 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.36438 * layer_1.width, y: layer_1.minY + 0.86016 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.38830 * layer_1.width, y: layer_1.minY + 0.87556 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.47104 * layer_1.width, y: layer_1.minY + 0.83520 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.44349 * layer_1.width, y: layer_1.minY + 0.87556 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.47104 * layer_1.width, y: layer_1.minY + 0.86497 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.51052 * layer_1.width, y: layer_1.minY + 0.69072 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.47104 * layer_1.width, y: layer_1.minY + 0.78019 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.49201 * layer_1.width, y: layer_1.minY + 0.73266 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.51921 * layer_1.width, y: layer_1.minY + 0.67078 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.51354 * layer_1.width, y: layer_1.minY + 0.68387 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.51647 * layer_1.width, y: layer_1.minY + 0.67723 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.51673 * layer_1.width, y: layer_1.minY + 0.66267 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.52039 * layer_1.width, y: layer_1.minY + 0.66801 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.51948 * layer_1.width, y: layer_1.minY + 0.66505 * layer_1.height))
        bezierPath.addCurve(to: CGPoint(x: layer_1.minX + 0.50298 * layer_1.width, y: layer_1.minY + 0.65886 * layer_1.height), controlPoint1: CGPoint(x: layer_1.minX + 0.51241 * layer_1.width, y: layer_1.minY + 0.65932 * layer_1.height), controlPoint2: CGPoint(x: layer_1.minX + 0.50940 * layer_1.width, y: layer_1.minY + 0.65915 * layer_1.height))
        bezierPath.close()
        borderColor.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawShadow(frame: CGRect = CGRect(x: 0, y: 69, width: 240, height: 25)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!


        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [UIColor.clear.cgColor, UIColor.clear.blended(withFraction: 0.5, of: UIColor.black).cgColor, UIColor.black.cgColor] as CFArray, locations: [0, 0.46, 0.68])!

        //// Oval Drawing
        let ovalRect = CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: frame.height + 25)
        let ovalPath = UIBezierPath(ovalIn: ovalRect)
        context.saveGState()
        ovalPath.addClip()
        context.drawLinearGradient(gradient,
            start: CGPoint(x: ovalRect.midX, y: ovalRect.minY),
            end: CGPoint(x: ovalRect.midX, y: ovalRect.maxY),
            options: [])
        context.restoreGState()
    }

}



private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
